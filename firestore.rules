rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isOrganizationMember(orgId) {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/organizations/$(orgId)) &&
        get(/databases/$(database)/documents/organizations/$(orgId)).data.members.hasAny([request.auth.uid]);
    }

    function isOrganizationOwner(orgId) {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/organizations/$(orgId)) &&
        get(/databases/$(database)/documents/organizations/$(orgId)).data.ownerId == request.auth.uid;
    }

    function isValidUsername(username) {
      return username is string && 
             username.size() >= 3 && 
             username.matches('^[a-zA-Z0-9_]+$');
    }

    function isUsernameAvailable(username) {
      // Check if any user has this username
      let usersWithUsername = getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;
      return !exists(/databases/$(database)/documents/users/$(request.auth.uid)) || usersWithUsername;
    }

    // Organizations
    match /organizations/{orgId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() &&
        request.resource.data.ownerId == request.auth.uid &&
        request.resource.data.members.hasOnly([request.auth.uid]);
      allow update, delete: if isOrganizationOwner(orgId);

      // Subcollections

      // User permissions
      match /user_permissions/{userId} {
        allow read: if isOrganizationMember(orgId) && (userId == request.auth.uid || isOrganizationOwner(orgId));
        allow write: if isOrganizationOwner(orgId);
      }

      // Analytics
      match /analytics/{docId} {
        allow read: if isOrganizationMember(orgId);
        allow write: if isOrganizationOwner(orgId);
      }

      // Assets
      match /assets/{assetId} {
        allow read, create, update, delete: if isOrganizationMember(orgId);
      }

      // Bookings
      match /bookings/{bookingId} {
        allow read, create, update, delete: if isOrganizationMember(orgId);
      }

      // Activity logs
      match /activity_logs/{logId} {
        allow read, create: if isOrganizationMember(orgId);
        allow update, delete: if false; // Immutable
      }
    }

    // Users
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    // Pending invites
    match /pending_invites/{inviteId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                   request.resource.data.invitedBy == request.auth.uid;
      allow update, delete: if false;
    }
  }
}
